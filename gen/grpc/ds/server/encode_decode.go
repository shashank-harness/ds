// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds gRPC server encoders and decoders
//
// Command:
// $ goa gen ds/design

package server

import (
	"context"
	ds "ds/gen/ds"
	dsviews "ds/gen/ds/views"
	dspb "ds/gen/grpc/ds/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeListResponse encodes responses from the "ds" service "list" endpoint.
func EncodeListResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(dsviews.AccountMgmtCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ds", "list", "dsviews.AccountMgmtCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoAccountMgmtCollection(result)
	return resp, nil
}

// EncodeDemoResponse encodes responses from the "ds" service "demo" endpoint.
func EncodeDemoResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ds", "demo", "int", v)
	}
	resp := NewProtoDemoResponse(result)
	return resp, nil
}

// DecodeDemoRequest decodes requests sent to "ds" service "demo" endpoint.
func DecodeDemoRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *dspb.DemoRequest
		ok      bool
	)
	{
		if message, ok = v.(*dspb.DemoRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ds", "demo", "*dspb.DemoRequest", v)
		}
	}
	var payload *ds.DemoPayload
	{
		payload = NewDemoPayload(message)
	}
	return payload, nil
}
