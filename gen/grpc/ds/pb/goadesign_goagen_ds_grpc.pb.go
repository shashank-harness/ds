// Code generated with goa v3.11.3, DO NOT EDIT.
//
// ds protocol buffer definition
//
// Command:
// $ goa gen ds/design

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: goadesign_goagen_ds.proto

package dspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ds_List_FullMethodName = "/ds.Ds/List"
	Ds_Demo_FullMethodName = "/ds.Ds/Demo"
)

// DsClient is the client API for Ds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DsClient interface {
	// List all stored bottles
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*AccountMgmtCollection, error)
	// Demo implements demo.
	Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
}

type dsClient struct {
	cc grpc.ClientConnInterface
}

func NewDsClient(cc grpc.ClientConnInterface) DsClient {
	return &dsClient{cc}
}

func (c *dsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*AccountMgmtCollection, error) {
	out := new(AccountMgmtCollection)
	err := c.cc.Invoke(ctx, Ds_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dsClient) Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, Ds_Demo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DsServer is the server API for Ds service.
// All implementations must embed UnimplementedDsServer
// for forward compatibility
type DsServer interface {
	// List all stored bottles
	List(context.Context, *ListRequest) (*AccountMgmtCollection, error)
	// Demo implements demo.
	Demo(context.Context, *DemoRequest) (*DemoResponse, error)
	mustEmbedUnimplementedDsServer()
}

// UnimplementedDsServer must be embedded to have forward compatible implementations.
type UnimplementedDsServer struct {
}

func (UnimplementedDsServer) List(context.Context, *ListRequest) (*AccountMgmtCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDsServer) Demo(context.Context, *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}
func (UnimplementedDsServer) mustEmbedUnimplementedDsServer() {}

// UnsafeDsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DsServer will
// result in compilation errors.
type UnsafeDsServer interface {
	mustEmbedUnimplementedDsServer()
}

func RegisterDsServer(s grpc.ServiceRegistrar, srv DsServer) {
	s.RegisterService(&Ds_ServiceDesc, srv)
}

func _Ds_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ds_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ds_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ds_Demo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsServer).Demo(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ds_ServiceDesc is the grpc.ServiceDesc for Ds service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ds_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ds.Ds",
	HandlerType: (*DsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Ds_List_Handler,
		},
		{
			MethodName: "Demo",
			Handler:    _Ds_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goadesign_goagen_ds.proto",
}
