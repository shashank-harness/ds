// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds HTTP client CLI support package
//
// Command:
// $ goa gen ds/design

package client

import (
	ds "ds/gen/ds"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildCompletePayload builds the payload for the ds complete endpoint from
// CLI flags.
func BuildCompletePayload(dsCompleteBody string, dsCompleteToken string) (*ds.CompletePayload, error) {
	var err error
	var body CompleteRequestBody
	{
		err = json.Unmarshal([]byte(dsCompleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"gaClientId\": \"Quisquam et assumenda aut aperiam voluptas saepe.\",\n      \"referer\": \"Dolorem enim officia dolorum molestiae aut placeat.\",\n      \"visitorToken\": \"Consequatur tenetur voluptatibus accusamus aut.\"\n   }'")
		}
	}
	var token string
	{
		token = dsCompleteToken
	}
	v := &ds.CompletePayload{
		Referer:      body.Referer,
		GaClientID:   body.GaClientID,
		VisitorToken: body.VisitorToken,
	}
	v.Token = &token

	return v, nil
}

// BuildDemoPayload builds the payload for the ds demo endpoint from CLI flags.
func BuildDemoPayload(dsDemoA string, dsDemoB string) (*ds.DemoPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(dsDemoA, 10, strconv.IntSize)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(dsDemoB, 10, strconv.IntSize)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &ds.DemoPayload{}
	v.A = a
	v.B = b

	return v, nil
}
