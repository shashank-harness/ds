// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds HTTP client types
//
// Command:
// $ goa gen ds/design

package client

import (
	ds "ds/gen/ds"
	dsviews "ds/gen/ds/views"

	goa "goa.design/goa/v3/pkg"
)

// CompleteRequestBody is the type of the "ds" service "complete" endpoint HTTP
// request body.
type CompleteRequestBody struct {
	// referer
	Referer *string `form:"referer,omitempty" json:"referer,omitempty" xml:"referer,omitempty"`
	// gaClientId
	GaClientID *string `form:"gaClientId,omitempty" json:"gaClientId,omitempty" xml:"gaClientId,omitempty"`
	// visitorToken
	VisitorToken *string `form:"visitorToken,omitempty" json:"visitorToken,omitempty" xml:"visitorToken,omitempty"`
}

// ListResponseBody is the type of the "ds" service "list" endpoint HTTP
// response body.
type ListResponseBody []*AccountMgmtResponse

// CompleteResponseBody is the type of the "ds" service "complete" endpoint
// HTTP response body.
type CompleteResponseBody struct {
	// UUID is the the unique id of this Account
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// email of this user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// name of this user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Tells in which cluster does this account operates in
	Clusterurl *string `form:"clusterurl,omitempty" json:"clusterurl,omitempty" xml:"clusterurl,omitempty"`
	// Name of the Account/Company
	Accountname *string `form:"accountname,omitempty" json:"accountname,omitempty" xml:"accountname,omitempty"`
}

// AccountMgmtResponse is used to define fields on response body types.
type AccountMgmtResponse struct {
	// ID is an integer type unique id of this DB entity of account.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// UUID is the the unique id of this Account
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Tells in which cluster does this account operates in
	Clusterurl *string `form:"clusterurl,omitempty" json:"clusterurl,omitempty" xml:"clusterurl,omitempty"`
	// Name of the Account/Company
	Accountname *string `form:"accountname,omitempty" json:"accountname,omitempty" xml:"accountname,omitempty"`
}

// NewCompleteRequestBody builds the HTTP request body from the payload of the
// "complete" endpoint of the "ds" service.
func NewCompleteRequestBody(p *ds.CompletePayload) *CompleteRequestBody {
	body := &CompleteRequestBody{
		Referer:      p.Referer,
		GaClientID:   p.GaClientID,
		VisitorToken: p.VisitorToken,
	}
	return body
}

// NewListAccountMgmtCollectionOK builds a "ds" service "list" endpoint result
// from a HTTP "OK" response.
func NewListAccountMgmtCollectionOK(body ListResponseBody) dsviews.AccountMgmtCollectionView {
	v := make([]*dsviews.AccountMgmtView, len(body))
	for i, val := range body {
		v[i] = unmarshalAccountMgmtResponseToDsviewsAccountMgmtView(val)
	}

	return v
}

// NewCompleteUserResourceOK builds a "ds" service "complete" endpoint result
// from a HTTP "OK" response.
func NewCompleteUserResourceOK(body *CompleteResponseBody) *dsviews.UserResourceView {
	v := &dsviews.UserResourceView{
		UUID:        body.UUID,
		Email:       body.Email,
		Name:        body.Name,
		Clusterurl:  body.Clusterurl,
		Accountname: body.Accountname,
	}

	return v
}

// ValidateAccountMgmtResponse runs the validations defined on
// AccountMgmtResponse
func ValidateAccountMgmtResponse(body *AccountMgmtResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Clusterurl == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clusterurl", "body"))
	}
	if body.Accountname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accountname", "body"))
	}
	return
}
