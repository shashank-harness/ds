// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds HTTP server encoders and decoders
//
// Command:
// $ goa gen ds/design

package server

import (
	"context"
	dsviews "ds/gen/ds/views"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the ds list
// endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(dsviews.AccountMgmtCollection)
		enc := encoder(ctx, w)
		body := NewAccountMgmtResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCompleteResponse returns an encoder for responses returned by the ds
// complete endpoint.
func EncodeCompleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*dsviews.UserResource)
		enc := encoder(ctx, w)
		body := NewCompleteResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCompleteRequest returns a decoder for requests sent to the ds complete
// endpoint.
func DecodeCompleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CompleteRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			token string

			params = mux.Vars(r)
		)
		token = params["token"]
		payload := NewCompletePayload(&body, token)

		return payload, nil
	}
}

// EncodeDemoResponse returns an encoder for responses returned by the ds demo
// endpoint.
func EncodeDemoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDemoRequest returns a decoder for requests sent to the ds demo
// endpoint.
func DecodeDemoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			a   int
			b   int
			err error

			params = mux.Vars(r)
		)
		{
			aRaw := params["a"]
			v, err2 := strconv.ParseInt(aRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("a", aRaw, "integer"))
			}
			a = int(v)
		}
		{
			bRaw := params["b"]
			v, err2 := strconv.ParseInt(bRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("b", bRaw, "integer"))
			}
			b = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDemoPayload(a, b)

		return payload, nil
	}
}

// marshalDsviewsAccountMgmtViewToAccountMgmtResponse builds a value of type
// *AccountMgmtResponse from a value of type *dsviews.AccountMgmtView.
func marshalDsviewsAccountMgmtViewToAccountMgmtResponse(v *dsviews.AccountMgmtView) *AccountMgmtResponse {
	res := &AccountMgmtResponse{
		ID:          *v.ID,
		UUID:        *v.UUID,
		Clusterurl:  *v.Clusterurl,
		Accountname: *v.Accountname,
	}

	return res
}
