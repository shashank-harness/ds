// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds HTTP client CLI support package
//
// Command:
// $ goa gen ds/design

package cli

import (
	dsc "ds/gen/http/ds/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `ds (list|complete|demo)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` ds list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		dsFlags = flag.NewFlagSet("ds", flag.ContinueOnError)

		dsListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		dsCompleteFlags     = flag.NewFlagSet("complete", flag.ExitOnError)
		dsCompleteBodyFlag  = dsCompleteFlags.String("body", "REQUIRED", "")
		dsCompleteTokenFlag = dsCompleteFlags.String("token", "REQUIRED", "Verification token")

		dsDemoFlags = flag.NewFlagSet("demo", flag.ExitOnError)
		dsDemoAFlag = dsDemoFlags.String("a", "REQUIRED", "Left operand")
		dsDemoBFlag = dsDemoFlags.String("b", "REQUIRED", "Right operand")
	)
	dsFlags.Usage = dsUsage
	dsListFlags.Usage = dsListUsage
	dsCompleteFlags.Usage = dsCompleteUsage
	dsDemoFlags.Usage = dsDemoUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "ds":
			svcf = dsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "ds":
			switch epn {
			case "list":
				epf = dsListFlags

			case "complete":
				epf = dsCompleteFlags

			case "demo":
				epf = dsDemoFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "ds":
			c := dsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "complete":
				endpoint = c.Complete()
				data, err = dsc.BuildCompletePayload(*dsCompleteBodyFlag, *dsCompleteTokenFlag)
			case "demo":
				endpoint = c.Demo()
				data, err = dsc.BuildDemoPayload(*dsDemoAFlag, *dsDemoBFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// dsUsage displays the usage of the ds command and its subcommands.
func dsUsage() {
	fmt.Fprintf(os.Stderr, `The directory service handles account mgmt
Usage:
    %[1]s [globalflags] ds COMMAND [flags]

COMMAND:
    list: List all stored bottles
    complete: Complete New Signup flow with token
    demo: Demo implements demo.

Additional help:
    %[1]s ds COMMAND --help
`, os.Args[0])
}
func dsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ds list

List all stored bottles

Example:
    %[1]s ds list
`, os.Args[0])
}

func dsCompleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ds complete -body JSON -token STRING

Complete New Signup flow with token
    -body JSON: 
    -token STRING: Verification token

Example:
    %[1]s ds complete --body '{
      "gaClientId": "Quisquam et assumenda aut aperiam voluptas saepe.",
      "referer": "Dolorem enim officia dolorum molestiae aut placeat.",
      "visitorToken": "Consequatur tenetur voluptatibus accusamus aut."
   }' --token "Totam rem."
`, os.Args[0])
}

func dsDemoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] ds demo -a INT -b INT

Demo implements demo.
    -a INT: Left operand
    -b INT: Right operand

Example:
    %[1]s ds demo --a 4256018498669544047 --b 2881819431768968193
`, os.Args[0])
}
