// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds views
//
// Command:
// $ goa gen ds/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// AccountMgmtCollection is the viewed result type that is projected based on a
// view.
type AccountMgmtCollection struct {
	// Type to project
	Projected AccountMgmtCollectionView
	// View to render
	View string
}

// UserResource is the viewed result type that is projected based on a view.
type UserResource struct {
	// Type to project
	Projected *UserResourceView
	// View to render
	View string
}

// AccountMgmtCollectionView is a type that runs validations on a projected
// type.
type AccountMgmtCollectionView []*AccountMgmtView

// AccountMgmtView is a type that runs validations on a projected type.
type AccountMgmtView struct {
	// ID is an integer type unique id of this DB entity of account.
	ID *int
	// UUID is the the unique id of this Account
	UUID *string
	// Tells in which cluster does this account operates in
	Clusterurl *string
	// Name of the Account/Company
	Accountname *string
}

// UserResourceView is a type that runs validations on a projected type.
type UserResourceView struct {
	// UUID is the the unique id of this Account
	UUID *string
	// email of this user
	Email *string
	// name of this user
	Name *string
	// Tells in which cluster does this account operates in
	Clusterurl *string
	// Name of the Account/Company
	Accountname *string
}

var (
	// AccountMgmtCollectionMap is a map indexing the attribute names of
	// AccountMgmtCollection by view name.
	AccountMgmtCollectionMap = map[string][]string{
		"default": {
			"id",
			"uuid",
			"clusterurl",
			"accountname",
		},
	}
	// UserResourceMap is a map indexing the attribute names of UserResource by
	// view name.
	UserResourceMap = map[string][]string{
		"default": {
			"uuid",
			"email",
			"name",
			"clusterurl",
			"accountname",
		},
	}
	// AccountMgmtMap is a map indexing the attribute names of AccountMgmt by view
	// name.
	AccountMgmtMap = map[string][]string{
		"default": {
			"id",
			"uuid",
			"clusterurl",
			"accountname",
		},
	}
)

// ValidateAccountMgmtCollection runs the validations defined on the viewed
// result type AccountMgmtCollection.
func ValidateAccountMgmtCollection(result AccountMgmtCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccountMgmtCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateUserResource runs the validations defined on the viewed result type
// UserResource.
func ValidateUserResource(result *UserResource) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserResourceView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateAccountMgmtCollectionView runs the validations defined on
// AccountMgmtCollectionView using the "default" view.
func ValidateAccountMgmtCollectionView(result AccountMgmtCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateAccountMgmtView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAccountMgmtView runs the validations defined on AccountMgmtView
// using the "default" view.
func ValidateAccountMgmtView(result *AccountMgmtView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "result"))
	}
	if result.Clusterurl == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clusterurl", "result"))
	}
	if result.Accountname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accountname", "result"))
	}
	return
}

// ValidateUserResourceView runs the validations defined on UserResourceView
// using the "default" view.
func ValidateUserResourceView(result *UserResourceView) (err error) {
	if result.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Clusterurl == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clusterurl", "result"))
	}
	if result.Accountname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accountname", "result"))
	}
	return
}
