// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ds service
//
// Command:
// $ goa gen ds/design

package ds

import (
	"context"
	dsviews "ds/gen/ds/views"
)

// The directory service handles account mgmt
type Service interface {
	// List all stored bottles
	List(context.Context) (res AccountMgmtCollection, err error)
	// Complete New Signup flow with token
	Complete(context.Context, *CompletePayload) (res *UserResource, err error)
	// Demo implements demo.
	Demo(context.Context, *DemoPayload) (res int, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ds"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "complete", "demo"}

// AccountMgmt type describes a customer account of company.
type AccountMgmt struct {
	// ID is an integer type unique id of this DB entity of account.
	ID int
	// UUID is the the unique id of this Account
	UUID string
	// Tells in which cluster does this account operates in
	Clusterurl string
	// Name of the Account/Company
	Accountname string
}

// AccountMgmtCollection is the result type of the ds service list method.
type AccountMgmtCollection []*AccountMgmt

// CompletePayload is the payload type of the ds service complete method.
type CompletePayload struct {
	// Verification token
	Token *string
	// referer
	Referer *string
	// gaClientId
	GaClientID *string
	// visitorToken
	VisitorToken *string
}

// DemoPayload is the payload type of the ds service demo method.
type DemoPayload struct {
	// Left operand
	A int
	// Right operand
	B int
}

// UserResource is the result type of the ds service complete method.
type UserResource struct {
	// UUID is the the unique id of this Account
	UUID string
	// email of this user
	Email string
	// name of this user
	Name string
	// Tells in which cluster does this account operates in
	Clusterurl string
	// Name of the Account/Company
	Accountname string
}

// NewAccountMgmtCollection initializes result type AccountMgmtCollection from
// viewed result type AccountMgmtCollection.
func NewAccountMgmtCollection(vres dsviews.AccountMgmtCollection) AccountMgmtCollection {
	return newAccountMgmtCollection(vres.Projected)
}

// NewViewedAccountMgmtCollection initializes viewed result type
// AccountMgmtCollection from result type AccountMgmtCollection using the given
// view.
func NewViewedAccountMgmtCollection(res AccountMgmtCollection, view string) dsviews.AccountMgmtCollection {
	p := newAccountMgmtCollectionView(res)
	return dsviews.AccountMgmtCollection{Projected: p, View: "default"}
}

// NewUserResource initializes result type UserResource from viewed result type
// UserResource.
func NewUserResource(vres *dsviews.UserResource) *UserResource {
	return newUserResource(vres.Projected)
}

// NewViewedUserResource initializes viewed result type UserResource from
// result type UserResource using the given view.
func NewViewedUserResource(res *UserResource, view string) *dsviews.UserResource {
	p := newUserResourceView(res)
	return &dsviews.UserResource{Projected: p, View: "default"}
}

// newAccountMgmtCollection converts projected type AccountMgmtCollection to
// service type AccountMgmtCollection.
func newAccountMgmtCollection(vres dsviews.AccountMgmtCollectionView) AccountMgmtCollection {
	res := make(AccountMgmtCollection, len(vres))
	for i, n := range vres {
		res[i] = newAccountMgmt(n)
	}
	return res
}

// newAccountMgmtCollectionView projects result type AccountMgmtCollection to
// projected type AccountMgmtCollectionView using the "default" view.
func newAccountMgmtCollectionView(res AccountMgmtCollection) dsviews.AccountMgmtCollectionView {
	vres := make(dsviews.AccountMgmtCollectionView, len(res))
	for i, n := range res {
		vres[i] = newAccountMgmtView(n)
	}
	return vres
}

// newAccountMgmt converts projected type AccountMgmt to service type
// AccountMgmt.
func newAccountMgmt(vres *dsviews.AccountMgmtView) *AccountMgmt {
	res := &AccountMgmt{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Clusterurl != nil {
		res.Clusterurl = *vres.Clusterurl
	}
	if vres.Accountname != nil {
		res.Accountname = *vres.Accountname
	}
	return res
}

// newAccountMgmtView projects result type AccountMgmt to projected type
// AccountMgmtView using the "default" view.
func newAccountMgmtView(res *AccountMgmt) *dsviews.AccountMgmtView {
	vres := &dsviews.AccountMgmtView{
		ID:          &res.ID,
		UUID:        &res.UUID,
		Clusterurl:  &res.Clusterurl,
		Accountname: &res.Accountname,
	}
	return vres
}

// newUserResource converts projected type UserResource to service type
// UserResource.
func newUserResource(vres *dsviews.UserResourceView) *UserResource {
	res := &UserResource{}
	if vres.UUID != nil {
		res.UUID = *vres.UUID
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Clusterurl != nil {
		res.Clusterurl = *vres.Clusterurl
	}
	if vres.Accountname != nil {
		res.Accountname = *vres.Accountname
	}
	return res
}

// newUserResourceView projects result type UserResource to projected type
// UserResourceView using the "default" view.
func newUserResourceView(res *UserResource) *dsviews.UserResourceView {
	vres := &dsviews.UserResourceView{
		UUID:        &res.UUID,
		Email:       &res.Email,
		Name:        &res.Name,
		Clusterurl:  &res.Clusterurl,
		Accountname: &res.Accountname,
	}
	return vres
}
